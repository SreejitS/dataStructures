INTRODUCTION
- Programs are basically set of instructions that perform operations on data. Organisation of data in the main memory during execution
time of a program is data structure.
- Array, matrices and linked list are called physical data structure ie they define how the data is arranged in the memory.
Stack,queue,trees,graph,hashing are logical data structure ie how data is utilised.
- Most of the data structure implementation are in recursion due the mathematical nature of CS. As this is inefficient in systems,
they are converted to loops.

C/C++ Concepts
- Pointers are variables to store the address of the data and can access data by dereferencing. One use case is accessing the heap
memory space. The code accesses the RAM & stack memory directly but not the heap ie accessing resources external to
program(file,network,hard disk). Other use case is parameter passing.
- Access heap using malloc function of stdlib in C. It returns a void pointer so typecast it [int *]. In C++ use new.
- In C++, you can use reference as a alias for a vairable and must be initialised during declaration.
int a=10;
int &ref = a; //ref is alias for a.
This is used for parameter passing.
- Array group of same data types. Structure group of different data types. Functions group of instructions for a task. Class group of similar
data and function.
- C has call by value and call by address. C++ adds call by reference. Add & in the formal variables. The way this is implemented
is that the function kind of inlines the called funcition into the calling funcition and thus can access the calling funcition's
local variables. Advisable for small funcitions, not for complex funtions with loops n all.
- Arrays are passed via pointer mechanism and therefore are pass by value only.
void func(int *A,int size) // A can point to any integer or integer array 
void func(int A[],int size) //A is a pointer to array only.
int [] func() //returning array
- When structure has an array and is passed by value then the array inside is also created in the stack frame(the function will
have its own copy of the array)
- Template class : C++ allows using of same classes with different data types.

INTRODUCTION
- Datastructure makes sense in the context of runtime of a program loaded in the main memory that accesses the data in the main
memory(not in storage). Datastructures are formed in the main memory during the execution time of program.
- Commercial data (bank,factories) have huge amount data stored in a database on the disk in the form of tables ie the arrangement
of data in the form of relational tables or other models such that the applications can retrieve them from the storage efficiently
is database.
- Data stored as array of disks in the form of operational data and legacy data(large and old data which are not used daily) are
called data warehouse. Algos for analysing these kinds of data are data mining algos.(searching for trends etc.)

STACK and HEAP 
- Generally RAM is divided into manageble size called segment and the value is 64KB(64x1024 bytes - address from 0 to 65535).
- When the memory needed for the program is decided at compile time and is static, it is called static memory allocation
- Stack memory is organised and the creation/deletion of variables are done automatically at runtime as decided by the compiler.
- Heap in unorganised memory and must be treated as a resource. It is accessed via pointer and must be deallocated to prevent
memory leaks.

PHYSICAL AND LOGICAL DATA STRUCTURE
- Physical data structure defines how the memory is organised and allocated for storing the data. Array can be in stack/heap and can be used when the
length is known. Linked list is in heap but the head may be on the stack and is used for variable size.
- Logical data structure is how you perform operations on the data like insertion/deletion. These are generally implemented using
physical data structures.

ABSTRACT DATA TYPE
- Data types are representation of the data in the memory and the operations allowed on it. If they are abstracted away and you
dont have to worry about its implementation then it is abstract data type. <-- didnt clearly understand this

TIME n SPACE COMPLEXITY
- Time complexity can be thought of the order/degree of polynomial of n(number of elements) required to complete a operation.
eg:
Adding the elements of an array is O(n) as you will access all the elements. O(n) is called order of n.
Comparing each elements with other elements is O(n^2)
Comparing each elements with elements in front of it in array is still O(n^2)
If the process divides the array successively by two each time untill it reaches 1, then it is O(log n) <--base2
For processing a single path in a binary tree is O(log n), if processing all the elements then O(n).
For simple processes it could be O(1) ie constant time ie not dependent on number of elements.like swapping two numbers.

- Space complexity can be thought of the storage needed is dependent on what. For array it is O(n). For nxn matrix it is O(n^2).

RECURSION
Basic structure : 
type funcitionName(param) {
    if(<base condition>) {
        --ascending or calling phase--;
        funcitionName(param);
        --descending or returning phase--;
    }
}

- Function calling itself untill a condition is met. The condition is needed or else it will go to infinite calling.
- Recursive funcitions are traced by building the tracing trees with it output on one side and the function call to itself with
the updated param on the other side, which keeps on splitting. The calling tree will have a calling phase and then the returning phase.
- Loops have only ascending stage but recursion have both ascending and descending stage.
- Stack frames are stored on top of each other and poped off once the recursive function starts returning.
- Tail recursion: If inside the recursive function, it is calling itself in the end then it is tail recursion and not doing any
processsing during return time. For such recursion, all the processing is done during calling time and none during the returning
time. Tail recursions can be easily converted into loops. Generally the time complexity will be same for loops and tail recursion
but space complexity will be more for recursion. Generally, the compiler will optimize this for you.
- Head recursion: If the first thing it does is a call to itself then it is head recursion. All the processing will be done during
return time. Not directly convertable to loops but can be done.
- Tree recursion: If the recursive function calls itself more than one time. Time complexity if it is called two times is O(2^n).
- Indirect recursion: If function calls one function and then it calls another function which calls the first function. There is a
cyclic calling involved.
- Nested recursion: When the function calls itself by passing same function as the argument. ex:
void fun(int n) {
    if(---) {
        fun ( fun (n - 1));
    }
}

ARRAYS
- scalar variable will store just one value, vector variable will store many values. Array is collection of same data types.
- A[5] = {2,4} ; // rest of the elements will be initialised to 0.
- A[3] & 3[A] & *(A+2) are the same thing. 
- Static array mean the size of the array is static and is decided at compile time. Dynamic array means the size fo array is
dynamic and is decided at runtime. Once the array is created, its size cannot be changed.
- For accessing the heap you need a pointer, which will be in stack but will store the starting address of array when using
malloc. Delete this pointer after use to avoid memory leak. Once assigned, access it using methods in third point.
- 2D array is still stored as a linear array. ways of initialising 2D array:
int A[3][4] = {{1,2,3,4},{4,5,6,7},{8,9,10,11}} //all in stack, normal way 

int *A[3]; A[0] = (int *)malloc(4*sizeof(int)); A[1] = (int *)malloc(4*sizeof(int)); A[2] = (int *)malloc(4*sizeof(int));
//this one is partially in stack and partially in heap. This is array of pointers. Each pointer pointing to a array in heap.

int **A; A = (int **)malloc(3*sizeof(int)); A[0] = (int *)malloc(4*sizeof(int)); A[1] = (int *)malloc(4*sizeof(int));
A[2] = (int *)malloc(4*sizeof(int));// All of the array will be in heap. This is a double pointer ie pointer to a pointer.

- Compiler stores the address of first element of the array for any operation on the array. For accessing nth element it adds base
address to n*sizeof(data). it is better to have 0 indexed array or else compiler will have to substract 1 each time.

- Array ADT : representation and set of operations on it. In C, representation is given by the compiler itself as it basic. No
operations are defined by default. 